@using PublicSite
@using PublicSite.Models
@model List<Criterion>

@{
    ViewBag.Title = "Index";
}

<script src="../../Scripts/DataTables-1.8.2/media/js/jquery.dataTables.js" type="text/javascript"></script>
<script src="../../Scripts/DataTables-1.8.2/extras/KeyTable/KeyTable.min.js" type="text/javascript"></script>
<script src="../../Scripts/DataTables-1.8.2/extras/RowGrouping/jquery.dataTables.rowGrouping.js"
    type="text/javascript"></script>
<link href="@Url.Content("~/Content/Site.less")" rel="stylesheet/less" type="text/css" />
<script src="@Url.Content("~/Scripts/less-1.1.3.min.js")" type="text/javascript"></script>

<style>
    .highlighted
    {
        background-color: blue;
    }
</style>

<h2>Index</h2>

<table id="selfevaltable">
    <thead>
        <tr>
            <th></th>
            <th>Category</th>
            <th>2<sup>n</sup> (Level 0)</th>
            <th>n<sup>2</sup> (Level 1)</th>
            <th>n (Level 2)</th>
            <th>log(n) (Level 3)</th>
            <th>Comments</th>
        </tr>
    </thead>
    <tbody>
        @*<tr>
                <th>Data structures</th>
                <td>Computer Science</td>
                <td>Doesn't know the difference between Array and LinkedList</td>
                <td>Able to explain and use Arrays, LinkedLists, Dictionaries etc in practical programming tasks</td>
                <td>Knows space and time tradeoffs of the basic data structures, Arrays vs LinkedLists, Able to explain how hashtables can be implemented and can handle collisions, Priority queues and ways to implement them etc.</td>
                <td>Knowledge of advanced data structures like B-trees, binomial and fibonacci heaps, AVL/Red Black trees, Splay Trees, Skip Lists, tries etc.</td>
                <td></td>
            </tr>*@
        @foreach (var criteria in @Model)
        {
            <tr>
                <th>@criteria.Name</th>
                <td>@criteria.Category</td>
                <td data-criteria="@criteria.Identifier" data-level="0" class="level0"> 
                    @{var firstOrDefaultL0 = criteria.Levels.Where(l => l.LevelNumber == (int)CriterionLevel.Level0).FirstOrDefault();}
                    @if (firstOrDefaultL0 != null)
                     {
                         @firstOrDefaultL0.Description}
                </td>
                <td data-criteria="@criteria.Identifier" data-level="1" class="level1"> 
                    @{var firstOrDefaultL1 = criteria.Levels.Where(l => l.LevelNumber == (int)CriterionLevel.Level1).FirstOrDefault();}
                    @if (firstOrDefaultL1 != null)
                     {
                         @firstOrDefaultL1.Description}
                </td>
                <td data-criteria="@criteria.Identifier" data-level="2" class="level2"> 
                    @{var firstOrDefaultL2 = criteria.Levels.Where(l => l.LevelNumber == (int)CriterionLevel.Level2).FirstOrDefault();}
                    @if (firstOrDefaultL2 != null)
                     {
                         @firstOrDefaultL2.Description}
                </td>
                <td data-criteria="@criteria.Identifier" data-level="3" class="level3"> 
                    @{var firstOrDefaultL3 = criteria.Levels.Where(l => l.LevelNumber == (int)CriterionLevel.Level3).FirstOrDefault();}
                    @if (firstOrDefaultL3 != null)
                     {
                         @firstOrDefaultL3.Description}
                </td>

                <td>@criteria.Comment</td>
            </tr>
        }
    </tbody>
    <tfoot></tfoot>
</table>

<script>
    $(document).ready(function () {
        var oTable = $('#selfevaltable')
            .dataTable({
                "bSort": false,
                "bLengthChange": false
            })
            .rowGrouping({
                iGroupingColumnIndex: 1,
                bHideGroupingColumn: true,
                bExpandableGrouping: true
            });

        $('td', oTable.fnGetNodes()).hover(
                function () {
                    //$(this).addClass("dark");
                    var level = $(this).data('level');
                    $(this).parent().children().slice(0, level + 2).addClass("dark");
                    //$(this).addClass("dark");
                },
                function () {
                    $(this).parent().children().removeClass("dark");
                });
    });
</script>